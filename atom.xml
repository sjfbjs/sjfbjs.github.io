<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sjfbjs.github.io</id>
    <title>蒜蒜的博客</title>
    <updated>2021-01-18T07:25:38.411Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sjfbjs.github.io"/>
    <link rel="self" href="https://sjfbjs.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://sjfbjs.github.io/images/avatar.png</logo>
    <icon>https://sjfbjs.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 蒜蒜的博客</rights>
    <entry>
        <title type="html"><![CDATA[golang 引用类型和值类型]]></title>
        <id>https://sjfbjs.github.io/post/golang-yin-yong-lei-xing-he-zhi-lei-xing/</id>
        <link href="https://sjfbjs.github.io/post/golang-yin-yong-lei-xing-he-zhi-lei-xing/">
        </link>
        <updated>2021-01-18T07:04:32.000Z</updated>
        <content type="html"><![CDATA[<p>前言</p>
<p>结构体的内存地址在使用的过程中是一直不变的 ，可以通过获取 fmt.printf(&quot;地址: %p&quot;,&amp;struct)</p>
<p>值类型：所有像int、float、bool和string这些类型都属于值类型，使用这些类型的变量直接指向存在内存中的值，值类型的变量的值存储在栈中。当使用等号=将一个变量的值赋给另一个变量时，如 j = i ,实际上是在内存中将 i 的值进行了拷贝。可以通过 &amp;i 获取变量 i 的内存地址</p>
<p>指针类型：简单地说go语言的指针类型和C/C++的指针类型用法是一样的，除了出去安全性的考虑，go语言增加了一些限制，包括如下几条：</p>
<p>不同类型的指针不能互相转化，例如<em>int, int32, 以及int64<br>
任何普通指针类型</em>T和uintptr之间不能互相转化<br>
指针变量不能进行运算, 比如C/C++里面的++, --运算<br>
下面将给大家详细介绍golang中值类型/指针类型的变量的一些区别，下面话不多说了，来一起看看详细的介绍吧。</p>
<p>值类型的变量和指针类型的变量</p>
<p>先声明一个结构体：</p>
<p>type T struct {<br>
Name string<br>
}<br>
func (t T) M1() {<br>
t.Name = &quot;name1&quot;<br>
}<br>
func (t *T) M2() {<br>
t.Name = &quot;name2&quot;<br>
}<br>
M1() 的接收者是值类型 T, M2() 的接收者是值类型 *T , 两个方法内都是改变Name值。</p>
<p>下面声明一个 T 类型的变量，并调用 M1() 和 M2() 。</p>
<p>t1 := T{&quot;t1&quot;}<br>
fmt.Println(&quot;M1调用前：&quot;, t1.Name)<br>
t1.M1()<br>
fmt.Println(&quot;M1调用后：&quot;, t1.Name)<br>
fmt.Println(&quot;M2调用前：&quot;, t1.Name)<br>
t1.M2()<br>
fmt.Println(&quot;M2调用后：&quot;, t1.Name)<br>
输出结果为：</p>
<p>M1调用前： t1</p>
<p>M1调用后： t1</p>
<p>M2调用前： t1</p>
<p>M2调用后： name2</p>
<p>下面猜测一下go会怎么处理。</p>
<p>先来约定一下：接收者可以看作是函数的第一个参数，即这样的： func M1(t T) , func M2(t *T) 。 go不是面向对象的语言，所以用那种看起来像面向对象的语法来理解可能有偏差。</p>
<p>当调用 t1.M1() 时相当于 M1(t1) ，实参和行参都是类型 T，可以接受。此时在M1()中的t只是t1的值拷贝，所以M1()的修改影响不到t1。</p>
<p>当调用 t1.M2() =&gt; M2(t1) ，这是将 T 类型传给了 *T 类型，go可能会取 t1 的地址传进去： M2(&amp;t1) 。所以 M2() 的修改可以影响 t1 。</p>
<p>类型的变量这两个方法都是拥有的。</p>
<p>下面声明一个 *T 类型的变量，并调用 M1() 和 M2() 。</p>
<p>t2 := &amp;T{&quot;t2&quot;}<br>
fmt.Println(&quot;M1调用前：&quot;, t2.Name)<br>
t2.M1()<br>
fmt.Println(&quot;M1调用后：&quot;, t2.Name)<br>
fmt.Println(&quot;M2调用前：&quot;, t2.Name)<br>
t2.M2()<br>
fmt.Println(&quot;M2调用后：&quot;, t2.Name)<br>
输出结果为：</p>
<p>M1调用前： t2</p>
<p>M1调用后： t2</p>
<p>M2调用前： t2</p>
<p>M2调用后： name2</p>
<p>t2.M1() =&gt; M1(t2) ， t2 是指针类型， 取 t2 的值并拷贝一份传给 M1。</p>
<p>t2.M2() =&gt; M2(t2) ，都是指针类型，不需要转换。</p>
<p>*T 类型的变量也是拥有这两个方法的。</p>
<p>传给接口会怎样？</p>
<p>先声明一个接口</p>
<p>type Intf interface {<br>
M1()<br>
M2()<br>
}<br>
使用：</p>
<p>var t1 T = T{&quot;t1&quot;}<br>
t1.M1()<br>
t1.M2()<br>
var t2 Intf = t1<br>
t2.M1()<br>
t2.M2()<br>
报错：</p>
<p>./main.go:9: cannot use t1 (type T) as type Intf in assignment:</p>
<p>T does not implement Intf (M2 method has pointer receiver)<br>
var t2 Intf = t1 这一行报错。</p>
<p>t1 是有 M2() 方法的，但是为什么传给 t2 时传不过去呢？</p>
<p>简单来说，按照接口的理论：传过去【赋值】的对象必须实现了接口要求的方法，而t1没有实现M2() ，t1的指针实现了M2() 。另外和c语言一样，函数名本身就是指针</p>
<p>当把 var t2 Intf = t1 修改为 var t2 Intf = &amp;t1 时编译通过，此时 t2 获得的是 t1 的地址， t2.M2()的修改可以影响到 t1 了。</p>
<p>如果声明一个方法 func f(t Intf) , 参数的传递和上面的直接赋值是一样的情况。</p>
<p>嵌套类型</p>
<p>声明一个类型 S，将 T 嵌入进去</p>
<p>type S struct { T }<br>
使用下面的例子测试一下：</p>
<p>t1 := T{&quot;t1&quot;}<br>
s := S{t1}<br>
fmt.Println(&quot;M1调用前：&quot;, s.Name)<br>
s.M1()<br>
fmt.Println(&quot;M1调用后：&quot;, s.Name)<br>
fmt.Println(&quot;M2调用前：&quot;, s.Name)<br>
s.M2()<br>
fmt.Println(&quot;M2调用后：&quot;, s.Name)<br>
fmt.Println(t1.Name)<br>
输出：</p>
<p>M1调用前： t1</p>
<p>M1调用后： t1</p>
<p>M2调用前： t1</p>
<p>M2调用后： name2</p>
<p>t1</p>
<p>将 T 嵌入 S， 那么 T 拥有的方法和属性 S 也是拥有的，但是接收者却不是 S 而是 T。</p>
<p>所以 s.M1() 相当于 M1(t1) 而不是 M1(s) 。</p>
<p>最后 t1 的值没有改变，因为我们嵌入的是 T 类型，所以 S{t1} 的时候是将 t1 拷贝了一份。</p>
<p>假如我们将 s 赋值给 Intf 接口会怎么样呢？</p>
<p>var intf Intf = s<br>
intf.M1()<br>
intf.M2()<br>
报错：</p>
<p>cannot use s (type S) as type Intf in assignment: S does not implement Intf (M2 method has pointer receiver)</p>
<p>还是 M2() 的问题，因为 s 此时还是值类型。</p>
<p>var intf Intf = &amp;s 这样的话编译通过了，如果在 intf.M2() 中改变了 Name 的值， s.Name 被改变了，但是 t1.Name 依然没变，因为现在 t1 和 s 已经没有联系了。</p>
<p>下面嵌入 *T 试试：</p>
<p>type S struct { *T }<br>
使用时这样：</p>
<p>t1 := T{&quot;t1&quot;}<br>
s := S{&amp;t1}<br>
fmt.Println(&quot;M1调用前：&quot;, s.Name)<br>
s.M1()<br>
fmt.Println(&quot;M1调用后：&quot;, s.Name)<br>
fmt.Println(&quot;M2调用前：&quot;, s.Name)<br>
s.M2()<br>
fmt.Println(&quot;M2调用后：&quot;, s.Name)<br>
fmt.Println(t1.Name)<br>
M1调用前： t1</p>
<p>M1调用后： t1</p>
<p>M2调用前： t1</p>
<p>M2调用后： name2</p>
<p>name2</p>
<p>惟一的区别是最后 t1 的值变了，因为我们复制的是指针。</p>
<p>接着赋值给接口试试：</p>
<p>var intf Intf = s i<br>
ntf.M1()<br>
intf.M2()<br>
fmt.Println(s.Name)<br>
编译没有报错。这里我们传递给 intf 的是值类型而不是指针，为什么可以通过呢？</p>
<p>拷贝 s 的时候里面的 T 是指针类型，所以调用 M2() 的时候传递进去的是一个指针。</p>
<p>var intf Intf = &amp;s 的效果和上面一样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[kubernetes handbook]]></title>
        <id>https://sjfbjs.github.io/post/kubernetes-handbook/</id>
        <link href="https://sjfbjs.github.io/post/kubernetes-handbook/">
        </link>
        <updated>2021-01-07T12:00:38.000Z</updated>
        <content type="html"><![CDATA[<p>https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gitlab-runner持续CI-CD搭建]]></title>
        <id>https://sjfbjs.github.io/post/gitlab-runner-chi-xu-ci-cd-da-jian/</id>
        <link href="https://sjfbjs.github.io/post/gitlab-runner-chi-xu-ci-cd-da-jian/">
        </link>
        <updated>2020-03-27T07:41:46.000Z</updated>
        <content type="html"><![CDATA[<p>https://blog.csdn.net/haha_66666/article/details/85113291<br>
可以用docker版的docker-runner<br>
docker run -d --name gitlab-runner --restart always    -v /var/run/docker.sock:/var/run/docker.sock   gitlab/gitlab-runner</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多态]]></title>
        <id>https://sjfbjs.github.io/post/duo-tai/</id>
        <link href="https://sjfbjs.github.io/post/duo-tai/">
        </link>
        <updated>2020-03-24T01:15:58.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://sjfbjs.github.io/post-images/1585012574125.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[继承父类并实现多个接口]]></title>
        <id>https://sjfbjs.github.io/post/ji-cheng-fu-lei-bing-shi-xian-duo-ge-jie-kou/</id>
        <link href="https://sjfbjs.github.io/post/ji-cheng-fu-lei-bing-shi-xian-duo-ge-jie-kou/">
        </link>
        <updated>2020-03-24T01:13:36.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://sjfbjs.github.io/post-images/1585012499636.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[k3s单master搭建]]></title>
        <id>https://sjfbjs.github.io/post/k3s-da-jian/</id>
        <link href="https://sjfbjs.github.io/post/k3s-da-jian/">
        </link>
        <updated>2020-03-23T11:56:55.000Z</updated>
        <content type="html"><![CDATA[<p>https://blog.niubi.dev/centos-k3s/</p>
<p>安装新版docker<br>
curl https://releases.rancher.com/install-docker/19.03.sh | sh</p>
<p>https://yq.aliyun.com/articles/704089</p>
<p>install  without   download</p>
<p>主节点安装<br>
curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=&quot;server --no-deploy traefik --docker&quot; INSTALL_K3S_BIN_DIR=&quot;/usr/local/bin&quot; INSTALL_K3S_SKIP_DOWNLOAD=true sh -s -<br>
k3s保存在本地或者百度云<br>
百度云地址</p>
<p>rz   k3s    =&gt;   /usr/local/bin<br>
curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=&quot;agent --docker&quot;  K3S_URL=https://MASTER_IP:6443 K3S_TOKEN='MASTER_TOKEN'  INSTALL_K3S_BIN_DIR=&quot;/usr/local/bin&quot; INSTALL_K3S_SKIP_DOWNLOAD=true    sh -s -</p>
<p>或者</p>
<p>K3S_URL=https://192.168.0.13:6443 K3S_TOKEN='K101539b824cccca8d7d2b6de8652fca609db6142edf2a623c6d7e89ad5b65d4abb::node:0263a7a5456e46c97ad2b1a7b738fea9'  INSTALL_K3S_BIN_DIR=&quot;/usr/local/bin&quot; INSTALL_K3S_SKIP_DOWNLOAD=true ./install.sh</p>
<p>先打包然后更新rancher镜像<br>
kubectl set image deployment/$project <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">project=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>image:$env   -n $namespace</p>
<p>标记master不可调度<br>
kubectl cordon k8s-node1    #将k8s-node1节点设置为不可调度模式<br>
kubectl drain k8s-node1     #将当前运行在k8s-node1节点上的容器驱离<br>
kubectl uncordon k8s-node1  #执行完维护后，将节点重新加入调度</p>
<p>服务端查看密码<br>
cat /var/lib/rancher/k3s/server/cred/node-passwd<br>
客户端查看密码<br>
cat  /var/lib/rancher/k3s/agent/node-password.txt<br>
这两个文件中的内容客户端和服务端需要一致</p>
<p>二 . 1.10.2 新版本k3s下载安装<br>
https://blog.csdn.net/weixin_44267608/article/details/102896032</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://sjfbjs.github.io/post/hello-gridea/</id>
        <link href="https://sjfbjs.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>